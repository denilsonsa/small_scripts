#!/bin/bash

MYNAME=`basename "$0"`

print_help() {
	cat << EOF
Usage: $MYNAME [-P <n>] [-k] [zopflipng options] [--] <filename(s)>

This script optimizes one or more PNG images in-place, using zopflipng.

It works by calling zopflipng on each input file, saving the output to a
temporary file, and then writing the temporary file on top of the original file.

  -P <n>    Run in parallel, with <n> being the number of parallel jobs.
  -k        Shortcut for --keepchunks=pHYs
  -kk       Shortcut for --keepchunks=pHYs,tIME
  -kkk      Shortcut for --keepchunks=pHYs,tIME,bKGD
  --        Marks the end of options and the start of filenames.
EOF
}

parse_arguments() {
	PARALLEL=0
	ZARGS=( )
	ZFILES=( )

	# Options or filenames, until the first filename, or until --.
	while [[ $# != 0 ]] ; do
		case "$1" in
			-h | -help | --help )
				print_help
				exit
				;;

			-prefix* | --prefix*)
				echo "${MYNAME}: The --prefix option cannot be used."
				exit 1
				;;
			-y)
				echo "${MYNAME}: The -y option cannot be used."
				exit 1
				;;

			-P)
				shift
				PARALLEL="$1"
				;;
			-k)
				ZARGS+=("--keepchunks=pHYs")
				;;
			-kk)
				ZARGS+=("--keepchunks=pHYs,tIME")
				;;
			-kkk)
				ZARGS+=("--keepchunks=pHYs,tIME,bKGD")
				;;

			-- )
				shift
				break
				;;

			-* )
				ZARGS+=("$1")
				;;

			* )
				ZFILES+=("$1")
				shift
				break
				;;
		esac
		shift
	done

	# Filenames.
	while [[ $# != 0 ]] ; do
		ZFILES+=("$1")
		shift
	done

	# Sanity checks:
	if [[ "${#ZFILES[@]}" = 0 ]] ; then
		echo "${MYNAME}: Missing parameters, use --help for instructions."
		exit 1
	fi

	if ! [[ "${PARALLEL}" =~ ^[0-9][0-9]*$ ]] ; then
		echo "${MYNAME}: Invalid -P value: ${PARALLEL}"
		exit 1
	fi

	FILE_ERROR=0
	for f in "${ZFILES[@]}" ; do
		if [ ! -f "${f}" ] ; then
			echo "${MYNAME}: File not found or not a regular file: ${f}"
			FILE_ERROR=1
		elif [ ! -r "${f}" ] ; then
			echo "${MYNAME}: File not readable: ${f}"
			FILE_ERROR=1
		fi
	done
	if [ "${FILE_ERROR}" = 1 ] ; then
		exit 1
	fi
}


# Main code.

parse_arguments "$@"

if ! which zopflipng > /dev/null ; then
	echo "${MYNAME}: zopflipng executable not found. You can compile and install it from:"
	echo 'https://github.com/google/zopfli/tree/master/src/zopflipng/'
	exit 1
fi

if [ "${PARALLEL}" = 0 ] ; then
	for f in "${ZFILES[@]}" ; do
		(
			TMPFILE="$(mktemp)"
			trap 'rm -f "${TMPFILE}"' EXIT

			# zopflipng does not exit with a non-zero status if an unknown flag is passed.
			# For this reason, we check if the temporary file is non-empty.
			zopflipng -y "${ZARGS[@]}" "${f}" "${TMPFILE}" && [ -s "${TMPFILE}" ] && {
				# Using cat instead of mv in order to preserve permissions of the original file.
				cat "${TMPFILE}" > "${f}"
			}
		)
	done
else
	# For parallel execution, this script calls itself through xargs.
	# https://stackoverflow.com/a/21998589/
	for f in "${ZFILES[@]}" ; do
		echo "${f}"
	done | xargs -d '\n' -n 1 -P "${PARALLEL}"    "${0}" "${ZARGS[@]}"
fi
